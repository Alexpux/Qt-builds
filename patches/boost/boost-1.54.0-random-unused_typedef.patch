Index: boost/random/generate_canonical.hpp
===================================================================
--- a/boost/random/generate_canonical.hpp	(revision 85073)
+++ b/boost/random/generate_canonical.hpp	(working copy)
@@ -54,7 +54,6 @@
     using std::floor;
     BOOST_ASSERT((g.min)() == 0);
     BOOST_ASSERT((g.max)() == 1);
-    typedef typename URNG::result_type base_result;
     std::size_t digits = std::numeric_limits<RealType>::digits;
     std::size_t engine_bits = detail::generator_bits<URNG>::value();
     std::size_t b = (std::min)(bits, digits);
Index: boost/random/uniform_real_distribution.hpp
===================================================================
--- a/boost/random/uniform_real_distribution.hpp	(revision 85073)
+++ b/boost/random/uniform_real_distribution.hpp	(working copy)
@@ -36,7 +36,6 @@
 {
     for(;;) {
         typedef T result_type;
-        typedef typename Engine::result_type base_result;
         result_type numerator = static_cast<T>(eng() - (eng.min)());
         result_type divisor = static_cast<T>((eng.max)() - (eng.min)());
         BOOST_ASSERT(divisor > 0);
