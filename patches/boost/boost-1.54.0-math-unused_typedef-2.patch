Index: boost/math/special_functions/airy.hpp
===================================================================
--- a/boost/math/special_functions/airy.hpp	(revision 85073)
+++ b/boost/math/special_functions/airy.hpp	(working copy)
@@ -340,13 +340,6 @@
 inline T airy_ai_zero(unsigned m, const Policy& pol)
 {
    BOOST_FPU_EXCEPTION_GUARD
-   typedef typename policies::evaluation<T, Policy>::type value_type;
-   typedef typename policies::normalise<
-      Policy, 
-      policies::promote_float<false>, 
-      policies::promote_double<false>, 
-      policies::discrete_quantile<>,
-      policies::assert_undefined<> >::type forwarding_policy;
    BOOST_STATIC_ASSERT_MSG(false == std::numeric_limits<T>::is_integer, "Airy return type must be a floating-point type.");
    return policies::checked_narrowing_cast<T, Policy>(detail::airy_ai_zero_imp<T>(m, pol), "boost::math::airy_ai_zero<%1%>(unsigned)");
 }
@@ -388,13 +381,6 @@
 inline T airy_bi_zero(unsigned m, const Policy& pol)
 {
    BOOST_FPU_EXCEPTION_GUARD
-   typedef typename policies::evaluation<T, Policy>::type value_type;
-   typedef typename policies::normalise<
-      Policy, 
-      policies::promote_float<false>, 
-      policies::promote_double<false>, 
-      policies::discrete_quantile<>,
-      policies::assert_undefined<> >::type forwarding_policy;
    BOOST_STATIC_ASSERT_MSG(false == std::numeric_limits<T>::is_integer, "Airy return type must be a floating-point type.");
    return policies::checked_narrowing_cast<T, Policy>(detail::airy_bi_zero_imp<T>(m, pol), "boost::math::airy_bi_zero<%1%>(unsigned)");
 }
Index: boost/math/special_functions/beta.hpp
===================================================================
--- a/boost/math/special_functions/beta.hpp	(revision 85073)
+++ b/boost/math/special_functions/beta.hpp	(working copy)
@@ -1331,7 +1331,6 @@
    BOOST_FPU_EXCEPTION_GUARD
    typedef typename tools::promote_args<RT1, RT2, RT3>::type result_type;
    typedef typename policies::evaluation<result_type, Policy>::type value_type;
-   typedef typename lanczos::lanczos<value_type, Policy>::type evaluation_type;
    typedef typename policies::normalise<
       Policy, 
       policies::promote_float<false>, 
@@ -1349,7 +1348,6 @@
    BOOST_FPU_EXCEPTION_GUARD
    typedef typename tools::promote_args<RT1, RT2, RT3>::type result_type;
    typedef typename policies::evaluation<result_type, Policy>::type value_type;
-   typedef typename lanczos::lanczos<value_type, Policy>::type evaluation_type;
    typedef typename policies::normalise<
       Policy, 
       policies::promote_float<false>, 
