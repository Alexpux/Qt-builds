diff -urN qt-everywhere-opensource-src-5.2.1/qtbase/mkspecs/features/qt.prf.orig qt-everywhere-opensource-src-5.2.1/qtbase/mkspecs/features/qt.prf
--- qt-everywhere-opensource-src-5.2.1/qtbase/mkspecs/features/qt.prf.orig	2014-03-07 01:48:59.575901600 +0000
+++ qt-everywhere-opensource-src-5.2.1/qtbase/mkspecs/features/qt.prf	2014-03-07 01:54:08.452568300 +0000
@@ -80,7 +80,7 @@
 contains(qt_module_deps, qml): \
         contains(QT_CONFIG, static):contains(TEMPLATE, .*app):!host_build:!no_import_scan {
     # run qmlimportscanner
-    qtPrepareTool(QMLIMPORTSCANNER, qmlimportscanner)
+    qtPrepareTool(QMLIMPORTSCANNER, qmlimportscanner, system)
     for (MODULE, QT_MODULES) {
         PATH = $$eval(QT.$${MODULE}.qml)
         !isEmpty(PATH):exists($$PATH): QMLPATHS += $$PATH
@@ -89,8 +89,8 @@
     for (QMLPATH, QMLPATHS): \
         IMPORTPATHS += -importPath $$QMLPATH
 
-    #message(run $$QMLIMPORTSCANNER $$_PRO_FILE_PWD_  $$IMPORTPATHS)
-    JSON = $$system($$QMLIMPORTSCANNER $$_PRO_FILE_PWD_ $$IMPORTPATHS)
+    #message(run $$QMLIMPORTSCANNERsystem $$_PRO_FILE_PWD_  $$IMPORTPATHS)
+    JSON = $$system($$QMLIMPORTSCANNERsystem $$_PRO_FILE_PWD_ $$IMPORTPATHS)
 
     parseJson(JSON, IMPORTS)| error("Failed to parse qmlimportscanner output.")
 
diff -urN qt-everywhere-opensource-src-5.2.1/qtbase/mkspecs/features/qt_functions.prf.orig qt-everywhere-opensource-src-5.2.1/qtbase/mkspecs/features/qt_functions.prf
--- qt-everywhere-opensource-src-5.2.1/qtbase/mkspecs/features/qt_functions.prf.orig	2014-03-07 01:48:59.575901600 +0000
+++ qt-everywhere-opensource-src-5.2.1/qtbase/mkspecs/features/qt_functions.prf	2014-03-07 01:54:08.452568300 +0000
@@ -216,15 +216,17 @@
 
 # target variable, list of env var names, [non-empty: prepare for system(), not make]
 defineTest(qtAddToolEnv) {
-    isEmpty(3): \
+    isEmpty(3) {
         ds = $$QMAKE_DIR_SEP
-    else: \
+    } else {
         ds = $$DIR_SEPARATOR
+        equals(MAKEFILE_GENERATOR, MINGW): MINGW_AND_SYSTEM = true
+    }
     for(env, 2) {
         value = $$eval($${env}.value)
         !isEmpty(value) {
             name = $$eval($${env}.name)
-            equals(ds, /) {
+            equals(ds, /):isEmpty(MINGW_AND_SYSTEM) {
                 contains($${env}.CONFIG, prepend): infix = \${$$name:+:\$$$name}
                 else: infix =
                 val = "$$name=$$join(value, :)$$infix"
