--- tcl8.6.1/win/tclWin32Dll.c.orig	2013-09-19 19:04:17.000000000 +0000
+++ tcl8.6.1/win/tclWin32Dll.c	2013-09-30 19:15:09.361498700 +0000
@@ -29,17 +29,17 @@
 /*
  * Unlike Borland and Microsoft, we don't register exception handlers by
  * pushing registration records onto the runtime stack. Instead, we register
- * them by creating an EXCEPTION_REGISTRATION within the activation record.
+ * them by creating an TCL_EXCEPTION_REGISTRATION within the activation record.
  */
 
-typedef struct EXCEPTION_REGISTRATION {
-    struct EXCEPTION_REGISTRATION *link;
+typedef struct TCL_EXCEPTION_REGISTRATION {
+    struct TCL_EXCEPTION_REGISTRATION *link;
     EXCEPTION_DISPOSITION (*handler)(
 	    struct _EXCEPTION_RECORD*, void*, struct _CONTEXT*, void*);
     void *ebp;
     void *esp;
     int status;
-} EXCEPTION_REGISTRATION;
+} TCL_EXCEPTION_REGISTRATION;
 #endif
 
 /*
@@ -662,7 +662,7 @@
 
 #   else
 
-    EXCEPTION_REGISTRATION registration;
+    TCL_EXCEPTION_REGISTRATION registration;
 
     /*
      * Execute the CPUID instruction with the given index, and store results
@@ -671,7 +671,7 @@
 
     __asm__ __volatile__(
 	/*
-	 * Construct an EXCEPTION_REGISTRATION to protect the CPUID
+	 * Construct an TCL_EXCEPTION_REGISTRATION to protect the CPUID
 	 * instruction (early 486's don't have CPUID)
 	 */
 
@@ -685,7 +685,7 @@
 	"movl	%[error],	0x10(%%edx)"	"\n\t" /* status */
 
 	/*
-	 * Link the EXCEPTION_REGISTRATION on the chain
+	 * Link the TCL_EXCEPTION_REGISTRATION on the chain
 	 */
 
 	"movl	%%edx,		%%fs:0"		"\n\t"
@@ -704,7 +704,7 @@
 	"movl	%%edx,		0xc(%%edi)"	"\n\t"
 
 	/*
-	 * Come here on a normal exit. Recover the EXCEPTION_REGISTRATION and
+	 * Come here on a normal exit. Recover the TCL_EXCEPTION_REGISTRATION and
 	 * store a TCL_OK status.
 	 */
 
@@ -714,7 +714,7 @@
 	"jmp	2f"				"\n"
 
 	/*
-	 * Come here on an exception. Get the EXCEPTION_REGISTRATION that we
+	 * Come here on an exception. Get the TCL_EXCEPTION_REGISTRATION that we
 	 * previously put on the chain.
 	 */
 
@@ -724,7 +724,7 @@
 
 	/*
 	 * Come here however we exited. Restore context from the
-	 * EXCEPTION_REGISTRATION in case the stack is unbalanced.
+	 * TCL_EXCEPTION_REGISTRATION in case the stack is unbalanced.
 	 */
 
 	"2:"					"\t"
--- tcl8.6.1/win/tclWinChan.c.orig	2013-09-19 19:04:17.000000000 +0000
+++ tcl8.6.1/win/tclWinChan.c	2013-09-30 19:15:31.059754000 +0000
@@ -124,17 +124,17 @@
 /*
  * Unlike Borland and Microsoft, we don't register exception handlers by
  * pushing registration records onto the runtime stack. Instead, we register
- * them by creating an EXCEPTION_REGISTRATION within the activation record.
+ * them by creating an TCL_EXCEPTION_REGISTRATION within the activation record.
  */
 
-typedef struct EXCEPTION_REGISTRATION {
-    struct EXCEPTION_REGISTRATION *link;
+typedef struct TCL_EXCEPTION_REGISTRATION {
+    struct TCL_EXCEPTION_REGISTRATION *link;
     EXCEPTION_DISPOSITION (*handler)(
 	    struct _EXCEPTION_RECORD*, void*, struct _CONTEXT*, void*);
     void *ebp;
     void *esp;
     int status;
-} EXCEPTION_REGISTRATION;
+} TCL_EXCEPTION_REGISTRATION;
 #endif
 
 /*
@@ -1030,7 +1030,7 @@
 				 * TCL_WRITABLE to indicate file mode. */
 {
 #if defined(HAVE_NO_SEH) && !defined(_WIN64)
-    EXCEPTION_REGISTRATION registration;
+    TCL_EXCEPTION_REGISTRATION registration;
 #endif
     char channelName[16 + TCL_INTEGER_SPACE];
     Tcl_Channel channel = NULL;
@@ -1111,7 +1111,7 @@
 	    "movl       %[dupedHandle], %%ebx"          "\n\t"
 
 	    /*
-	     * Construct an EXCEPTION_REGISTRATION to protect the call to
+	     * Construct an TCL_EXCEPTION_REGISTRATION to protect the call to
 	     * CloseHandle.
 	     */
 
@@ -1125,7 +1125,7 @@
 	    "movl       $0,             0x10(%%edx)"    "\n\t" /* status */
 
 	    /*
-	     * Link the EXCEPTION_REGISTRATION on the chain.
+	     * Link the TCL_EXCEPTION_REGISTRATION on the chain.
 	     */
 
 	    "movl       %%edx,          %%fs:0"         "\n\t"
@@ -1138,7 +1138,7 @@
 	    "call       _CloseHandle@4"                 "\n\t"
 
 	    /*
-	     * Come here on normal exit. Recover the EXCEPTION_REGISTRATION
+	     * Come here on normal exit. Recover the TCL_EXCEPTION_REGISTRATION
 	     * and put a TRUE status return into it.
 	     */
 
@@ -1148,7 +1148,7 @@
 	    "jmp        2f"                             "\n"
 
 	    /*
-	     * Come here on an exception. Recover the EXCEPTION_REGISTRATION
+	     * Come here on an exception. Recover the TCL_EXCEPTION_REGISTRATION
 	     */
 
 	    "1:"                                        "\t"
@@ -1157,7 +1157,7 @@
 
 	    /*
 	     * Come here however we exited. Restore context from the
-	     * EXCEPTION_REGISTRATION in case the stack is unbalanced.
+	     * TCL_EXCEPTION_REGISTRATION in case the stack is unbalanced.
 	     */
 
 	    "2:"                                        "\t"
--- tcl8.6.1/win/tclWinFCmd.c.orig	2013-09-19 19:04:17.000000000 +0000
+++ tcl8.6.1/win/tclWinFCmd.c	2013-09-30 19:15:54.929785200 +0000
@@ -72,17 +72,17 @@
 /*
  * Unlike Borland and Microsoft, we don't register exception handlers by
  * pushing registration records onto the runtime stack. Instead, we register
- * them by creating an EXCEPTION_REGISTRATION within the activation record.
+ * them by creating an TCL_EXCEPTION_REGISTRATION within the activation record.
  */
 
-typedef struct EXCEPTION_REGISTRATION {
-    struct EXCEPTION_REGISTRATION *link;
+typedef struct TCL_EXCEPTION_REGISTRATION {
+    struct TCL_EXCEPTION_REGISTRATION *link;
     EXCEPTION_DISPOSITION (*handler)(
 	    struct _EXCEPTION_RECORD *, void *, struct _CONTEXT *, void *);
     void *ebp;
     void *esp;
     int status;
-} EXCEPTION_REGISTRATION;
+} TCL_EXCEPTION_REGISTRATION;
 
 #endif
 
@@ -176,7 +176,7 @@
 				 * (native). */
 {
 #if defined(HAVE_NO_SEH) && !defined(_WIN64)
-    EXCEPTION_REGISTRATION registration;
+    TCL_EXCEPTION_REGISTRATION registration;
 #endif
     DWORD srcAttr, dstAttr;
     int retval = -1;
@@ -213,7 +213,7 @@
 	"movl	    %[nativeSrc],   %%ecx"	    "\n\t"
 
 	/*
-	 * Construct an EXCEPTION_REGISTRATION to protect the call to
+	 * Construct an TCL_EXCEPTION_REGISTRATION to protect the call to
 	 * MoveFile.
 	 */
 
@@ -227,7 +227,7 @@
 	"movl	    $0,		    0x10(%%edx)"    "\n\t" /* status */
 
 	/*
-	 * Link the EXCEPTION_REGISTRATION on the chain.
+	 * Link the TCL_EXCEPTION_REGISTRATION on the chain.
 	 */
 
 	"movl	    %%edx,	    %%fs:0"	    "\n\t"
@@ -242,7 +242,7 @@
 	"call	    *%%eax"			    "\n\t"
 
 	/*
-	 * Come here on normal exit. Recover the EXCEPTION_REGISTRATION and
+	 * Come here on normal exit. Recover the TCL_EXCEPTION_REGISTRATION and
 	 * put the status return from MoveFile into it.
 	 */
 
@@ -251,7 +251,7 @@
 	"jmp	    2f"				    "\n"
 
 	/*
-	 * Come here on an exception. Recover the EXCEPTION_REGISTRATION
+	 * Come here on an exception. Recover the TCL_EXCEPTION_REGISTRATION
 	 */
 
 	"1:"					    "\t"
@@ -260,7 +260,7 @@
 
 	/*
 	 * Come here however we exited. Restore context from the
-	 * EXCEPTION_REGISTRATION in case the stack is unbalanced.
+	 * TCL_EXCEPTION_REGISTRATION in case the stack is unbalanced.
 	 */
 
 	"2:"					    "\t"
@@ -563,7 +563,7 @@
     const TCHAR *nativeDst)	/* Pathname of file to copy to (native). */
 {
 #if defined(HAVE_NO_SEH) && !defined(_WIN64)
-    EXCEPTION_REGISTRATION registration;
+    TCL_EXCEPTION_REGISTRATION registration;
 #endif
     int retval = -1;
 
@@ -600,7 +600,7 @@
 	"movl	    %[nativeSrc],   %%ecx"	    "\n\t"
 
 	/*
-	 * Construct an EXCEPTION_REGISTRATION to protect the call to
+	 * Construct an TCL_EXCEPTION_REGISTRATION to protect the call to
 	 * CopyFile.
 	 */
 
@@ -614,7 +614,7 @@
 	"movl	    $0,		    0x10(%%edx)"    "\n\t" /* status */
 
 	/*
-	 * Link the EXCEPTION_REGISTRATION on the chain.
+	 * Link the TCL_EXCEPTION_REGISTRATION on the chain.
 	 */
 
 	"movl	    %%edx,	    %%fs:0"	    "\n\t"
@@ -630,7 +630,7 @@
 	"call	    *%%eax"			    "\n\t"
 
 	/*
-	 * Come here on normal exit. Recover the EXCEPTION_REGISTRATION and
+	 * Come here on normal exit. Recover the TCL_EXCEPTION_REGISTRATION and
 	 * put the status return from CopyFile into it.
 	 */
 
@@ -639,7 +639,7 @@
 	"jmp	    2f"				    "\n"
 
 	/*
-	 * Come here on an exception. Recover the EXCEPTION_REGISTRATION
+	 * Come here on an exception. Recover the TCL_EXCEPTION_REGISTRATION
 	 */
 
 	"1:"					    "\t"
@@ -648,7 +648,7 @@
 
 	/*
 	 * Come here however we exited. Restore context from the
-	 * EXCEPTION_REGISTRATION in case the stack is unbalanced.
+	 * TCL_EXCEPTION_REGISTRATION in case the stack is unbalanced.
 	 */
 
 	"2:"					    "\t"
